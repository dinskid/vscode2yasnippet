# -*- mode: snippet -*-
# name: Segment Tree
# key: libSEGTREE
# --
template <typename T>
struct SegTree {
	int size, n, ie;
	vector<T> tree;
	T(*combine) (T x, T y);
	/**
	 * n -> size of the input array
	 * it -> identity element/value when query invalid such that combine fn works
	 *			along with it (example: 0 for sum/xor/gcd, +inf for min, -inf for max)
	 * */
	SegTree(int nn, int _ie, T(*_combine)(T x, T y)) {
		this->combine = _combine;
		this->ie = _ie;
		// it = ei;
		size = 1;
		while (size < nn) size *= 2;
		this->n = size;
		size *= 2;
		this->size = size;
		this->tree = vector<T>(size);
	}

	void init(vector<T> v) {
		for (int i = 0; i < (int)v.size(); i++)
			tree[i + n] = v[i];
	}

	void build() {
		for (int i = n - 1; i > 0; i--)
			tree[i] = combine(tree[2 * i], tree[2 * i + 1]);
	}

	void update(int i, T v) {
		i += n;
		tree[i] = v;
		while (i) {
			i /= 2;
			tree[i] = combine(tree[2 * i], tree[2 * i + 1]);
		}
	}

	T _query(int l, int r, int x, int lx, int rx) {
		if (r < lx or l > rx) return ie;
		if (l <= lx and r >= rx) return tree[x];

		int mx = lx + (rx - lx) / 2;
		return combine(_query(l, r, 2 * x, lx, mx), _query(l, r, 2 * x + 1, mx + 1, rx));
	}

	T query(int l, int r) {
		assert(l <= r);
		return _query(l, r, 1, 0, n - 1);
	}
};